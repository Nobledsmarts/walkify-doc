class Walkify{constructor(routesObj,viewElem){this.routes=routesObj,this.supportedPrefix=["!","$","%","^","*","_","+","~","-","`",":","@","#"],this.variableBracketsStart="{{",this.variableBracketsEnd="}}",this.variablePrefix="\\$",this.previousHash="",viewElem&&this.mount(viewElem)}init(){window.onload=()=>{this.navigate()},window.onhashchange=()=>{this.navigate()},this.setLinksHandler()}setLinksHandler(){let links;[...document.getElementsByTagName("a")].forEach(link=>{let linkHref=link.getAttribute("href"),isRouteLink=!/www|http|https|ftp/gi.test(linkHref);link.hasAttribute("href")&&isRouteLink&&link.addEventListener("click",event=>{linkHref=linkHref.startsWith("#")?linkHref:"#"+linkHref,event.preventDefault(),location.hash!=linkHref&&("exist"in this.currentRoute&&this.currentRoute.exist(),this.previousHash=this.getHash()||"/",this.routeTo(linkHref))})})}navigate(){this.getHash()?this.route():this.routeTo("/")}getHash(){let urlhash=location.hash;return urlhash.slice(1)?urlhash.slice(1):""}routeTo(url){return location.hash=url,this}redirectTo(url,data){url in this.routes&&(this.routes[url].view=this.view.bind(this,this.routes[url],{data:data,redirect:!0}),this.routes[url].matched.apply(this.routes[url]),this.currentRoute=this.routes[url])}getRoutes(){return Object.keys(this.routes)}mount(viewElem){let rootElem=document.querySelector(viewElem),attribute="."==viewElem[0]?"classname":"id";if(!rootElem)throw new Error("could not found element with "+attribute+" "+viewElem.slice(1));return this.viewElem=rootElem,this.viewSelector=viewElem,this.init(),[this,rootElem]}extractUrlQuery(url){let queryPart=(url=url||this.getHash()).split("?")[1];if(!queryPart)return{};let urlArr=queryPart.split("&"),obj={};for(let i=0;i<urlArr.length;i++){let prop=urlArr[i].split("=");obj[prop[0]]=decodeURI(prop[1])}return obj}getPreviousHash(){return this.previousHash}getResponseObject(queryObject,hashPartArr){let from=this.getPreviousHash();return{params:queryObject,url:{to:hashPartArr[0],from:from}}}route(){let hashUrl=this.getHash(),urlHasQuery=-1!=hashUrl.indexOf("?"),queryObject=this.extractUrlQuery(hashUrl),hashPartArr=hashUrl.split("#"),queryIndex=hashPartArr[0].indexOf("?"),hashPart=urlHasQuery?hashPartArr[0].slice(0,queryIndex):hashPartArr[0];if(this.routes.hasOwnProperty(hashPart)){let foundRoutes;Object.keys(this.routes).filter(route=>route.endsWith("*")?this.isTheSameAstRoute(route,hashPart):route==hashPart?route:void 0).forEach(route=>{if(!("matched"in this.routes[route]))throw new Error('walkify expected hook "matched" not found!');this.routes[route].view=this.view.bind(this,this.routes[route]),this.routes[route].matched.call(this.routes[route],this.getResponseObject(queryObject,hashPartArr))}),this.currentRoute=this.routes[hashPart]}else{let foundRoute=this.findRoute(hashPart);if(hashPart&&foundRoute){let keyArr=hashPart.split("/"),routeArr=foundRoute.closeRoute?foundRoute.closeRoute.split("/"):foundRoute.split("/"),isTheSame;if(isTheSame=-1!=routeArr.indexOf("*")?this.isTheSameAstRoute(routeArr.join("/"),hashPart):this.compare(routeArr,keyArr),isTheSame){let foundRoutes;return(foundRoute.routes?foundRoute.routes:[foundRoute.closeRoute]).forEach(route=>{let matchedObj;if(!("matched"in this.routes[route]))throw new Error('walkify expected hook "matched" not found!');{let newObj=this.buildObj(route.split("/"),keyArr);this.routes[route].view=this.view.bind(this,this.routes[route]),this.routes[route].matched.apply(this.routes[route],[this.getResponseObject(queryObject,hashPartArr),...Object.values(newObj)])}}),this.currentRoute=this.routes[foundRoute.closeRoute],this}}if("!"in this.routes){if(!("matched"in this.routes["!"]))throw new Error('walkify expected hook "matched" not found!');this.routes["!"].view=this.view.bind(this,this.routes["!"]),this.routes["!"].matched.apply(this.routes["!"]),this.currentRoute=this.routes["!"]}}return this}isTheSameAstRoute(route,hashPart){let hashArr=hashPart.split("/"),routeArr=route.split("/"),astIndex=routeArr.lastIndexOf("*"),slicedHash=hashArr.slice(0,astIndex),slicedHashStr=slicedHash.join("/"),slicedCloseRoute=routeArr.slice(0,-1),isDynamicMatch;return/{(.+?):(.+?)}/.test(route)?this.compare(slicedCloseRoute,slicedHash):slicedCloseRoute.join("/")==slicedHashStr}compare(routesArr,hashArr){if(hashArr.length!=routesArr.length)return hashArr.join("").startsWith(routesArr.join("").slice(0,-1));if(-1==routesArr.indexOf("*")){let bool=!1,b=routesArr.map((el,i)=>{if(el.includes("{")&&el.includes("}")&&(el=el.slice(1,-1)),el.includes(":")){bool=!0;let regexString=el.split(":")[1],regex;return new RegExp("^("+regexString+")+$").test(hashArr[i])}return el==hashArr[i]});return b=b.every(el=>!0===el),b}}closestRoute(routesArr,hashArr){let matchCountObj={};routesArr.forEach(route=>{matchCountObj[route]={path:route,count:0};let currentRouteArr=route.split("/");for(let i=0;i<currentRouteArr.length;i++)currentRouteArr[i]&&hashArr[i]==currentRouteArr[i]&&(matchCountObj[route].count+=1)});let matchCountArr=Object.keys(matchCountObj).filter(key=>matchCountObj[key].count);if(matchCountArr.length){let Highestcount=Math.max.apply(null,matchCountArr.map(route=>matchCountObj[route].count)),closeRoute=matchCountArr.filter(route=>matchCountObj[route].count==Highestcount)[0],closeRouteArr=closeRoute.split("/"),isDynamicMatch=/{(.+?):(.+?)}/.test(closeRoute);if(-1==closeRoute.indexOf("*")&&closeRouteArr.length==Highestcount)return{closeRoute:closeRoute};if(-1!=closeRoute.indexOf("*"))return{closeRoute:closeRoute,routes:matchCountArr};if(isDynamicMatch)return{closeRoute:closeRoute}}}findRoute(urlHash){let routes=this.routes,hashArr=urlHash.split("/"),routesArr=Object.keys(routes),routesWithSameLength=routesArr.filter(route=>route.split("/").length==hashArr.length&&!!hashArr[hashArr.length-1]||route.endsWith("*")&&this.isTheSameAstRoute(route,urlHash)),routesWithAsteriks=routesArr.filter(route=>route.endsWith("*")&&this.isTheSameAstRoute(route,urlHash));return routesWithSameLength.length?this.closestRoute(routesWithSameLength,hashArr):this.closestRoute(routesWithAsteriks,hashArr)}buildObj(routeArr,hashArr){let obj={},filter1=hashArr.filter((el,i)=>el!=routeArr[i]),filter2;return routeArr.filter((e,i)=>e!=hashArr[i]).forEach((el,i)=>{el.includes(":")?obj[el.slice(1,-1).split(":")[0]]=filter1[i]:el.includes("}")&&el.includes("{")&&!el.includes(":")&&(obj[el.slice(1,-1)]=filter1[i])}),obj}hasTemplate(templates,viewObj){return templates.some(template=>template.getAttribute("for")==viewObj.name)}view(viewObj,data={},temp,temp2){if(data=data||{},"Object"!=this.typeof(data))throw new Error("invalid data type passed, first parameter of view method must be an object");if(!temp||data.redirect){if(!("name"in viewObj||data.redirect))throw new Error('property "name" missing in route object');let templates=[...document.getElementsByTagName("template")];if(!this.hasTemplate(templates,viewObj)&&!data.redirect)throw new Error("template not found for current page");data.redirect&&temp2?this.mountView(data.redirect?data.data||temp:data,temp2):templates.forEach(template=>{template.getAttribute("for")==viewObj.name&&this.mountView(data.redirect?data.data||temp:data,template)},this),"mounted"in viewObj&&viewObj.mounted(),this.setLinksHandler()}else this.mountView(data,temp),"mounted"in viewObj&&viewObj.mounted(),this.setLinksHandler()}mountView(data,template){let hasNoPrefix=this.noVariablePrefix;template="string"!=typeof template?template.innerHTML:template;let regex="["+(hasNoPrefix?this.supportedPrefix.join("|"):this.variablePrefix)+"]"+(hasNoPrefix?"*":"+")+"?"+this.variableBracketsStart+"+(.+?)"+this.variableBracketsEnd+"+";template=template.replace(new RegExp(regex,"ig"),matched=>{let key=matched.slice(this.variableBracketsStart.length+(hasNoPrefix?0:this.variablePrefix.length-1),-this.variableBracketsEnd.length).trim(),hasCharLeft=-1!=key.indexOf(this.variableBracketsEnd[0])||-1!=key.indexOf(this.variableBracketsStart[0]);if(key in data)return"object"==typeof data[key]?JSON.stringify(data[key]):data[key];if(/\.|\[|\]/gi.test(key))try{let expression="data."+key,evalExpression=eval(eval("(expression)"));return"object"==typeof evalExpression?JSON.stringify(evalExpression):evalExpression}catch(e){return void console.error(e)}else try{return eval(key)}catch(e){return hasCharLeft||console.error('property : "'+key+'" not defined'),hasCharLeft?matched:void 0}}),this.viewElem.innerHTML=template,this.redrawRoot()}setPrefix(variablePrefix){let isSupported;if(variablePrefix=variablePrefix?variablePrefix.trim():variablePrefix,!(-1!=this.supportedPrefix.indexOf(variablePrefix))&&!1!==variablePrefix)throw new Error("prefix not supported");!1!==variablePrefix&&variablePrefix||(this.noVariablePrefix=!0),this.variablePrefix="\\"+variablePrefix}setVariableBrackets(brackets){if("Array"!=this.typeof(brackets))throw new Error("parameter for setVariableBrackets method must be of the type Array");if(brackets.length>2)throw new Error("array should not be greater than two");if("String"!=this.typeof(brackets[0])||"String"!=this.typeof(brackets[0]))throw new Error("character types in the array must be string");this.variableBracketsStart=brackets[0],this.variableBracketsEnd=brackets[1]}typeof(variable){return variable.constructor.name}redrawRoot(){let root=document.querySelector(this.viewSelector);root.innerHTML!=this.viewElem.innerHTML&&(root.innerHTML=this.viewElem.innerHTML)}}